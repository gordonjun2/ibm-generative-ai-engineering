# Use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass


import warnings

warnings.warn = warn
warnings.filterwarnings('ignore')

from ibm_watsonx_ai.foundation_models import ModelInference
from langchain.agents import AgentType
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.foundation_models.utils.enums import ModelTypes
from ibm_watson_machine_learning.foundation_models.extensions.langchain import WatsonxLLM
from langchain_community.utilities.sql_database import SQLDatabase
from langchain_community.agent_toolkits import create_sql_agent
import argparse

# Set up argument parser
parser = argparse.ArgumentParser()
parser.add_argument("--prompt",
                    type=str,
                    help="The prompt to send to the SQL agent")
args = parser.parse_args()

model_id = 'ibm/granite-3-2-8b-instruct'

parameters = {
    GenParams.MAX_NEW_TOKENS:
    256,  # This controls the maximum number of tokens in the generated output
    GenParams.TEMPERATURE:
    0.5,  # This randomness or creativity of the model's responses
}

credentials = {"url": "https://us-south.ml.cloud.ibm.com"}

project_id = "skills-network"

model = ModelInference(model_id=model_id,
                       params=parameters,
                       credentials=credentials,
                       project_id=project_id)

llm = WatsonxLLM(model=model)

mysql_username = '<USERNAME>'
mysql_password = '<PASSWORD>'  # Replace with your server connect information
mysql_host = '<HOST>'  # Replace with your server connect information
mysql_port = '<PORT>'  # Replace with your server connect information
database_name = 'Chinook'
mysql_uri = f'mysql+mysqlconnector://{mysql_username}:{mysql_password}@{mysql_host}:{mysql_port}/{database_name}'
db = SQLDatabase.from_uri(mysql_uri)

agent_executor = create_sql_agent(
    llm=llm,
    db=db,
    verbose=True,
    handle_parsing_errors=True,
    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION)

# agent_executor.invoke(
#     "How many Album are there in the database?"
# )

# agent_executor.invoke(
#     "Describe the PlaylistTrack table"
# )

# agent_executor.invoke(
#     "How many employees are there?"
# )

# agent_executor.invoke(
#     "Can you left join table Artist and table Album by ArtistId? Please show me 5 Name and AlbumId in the joint table."
# )

# agent_executor.invoke(
#     "Which country's customers spent the most by invoice?"
# )

# Use the prompt from command line argument
if args.prompt:
    agent_executor.invoke(args.prompt)
else:
    print("Please provide a prompt using --prompt argument")
